#include <stdio.h>
#include <stdlib.h>

int** allocateMatrix(int rows, int cols) {
    int** matrix = (int**)malloc(rows * sizeof(int*));
    for (int i = 0; i < rows; i++) {
        matrix[i] = (int*)malloc(cols * sizeof(int));
    }
    return matrix;
}

void freeMatrix(int** matrix, int rows) {
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

void inputMatrix(int** matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("Enter element [%d][%d]: ", i, j);
            scanf("%d", &matrix[i][j]);
        }
    }
}

void printMatrix(int** matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int** multiplyMatrices(int** A, int** B, int rowsA, int colsA, int colsB) {
    int** C = allocateMatrix(rowsA, colsB);
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            C[i][j] = 0;
            for (int k = 0; k < colsA; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
    return C;
}

int main() {
    int rowsA, colsA, rowsB, colsB;

    printf("Enter rows and columns of matrix A: ");
    scanf("%d %d", &rowsA, &colsA);

    printf("Enter rows and columns of matrix B: ");
    scanf("%d %d", &rowsB, &colsB);

    if (colsA != rowsB) {
        printf("Matrix multiplication not possible.\n");
        return 1;
    }

    int** A = allocateMatrix(rowsA, colsA);
    int** B = allocateMatrix(rowsB, colsB);

    printf("Enter elements of matrix A:\n");
    inputMatrix(A, rowsA, colsA);

    printf("Enter elements of matrix B:\n");
    inputMatrix(B, rowsB, colsB);

    int** C = multiplyMatrices(A, B, rowsA, colsA, colsB);

    printf("Resultant matrix after multiplication:\n");
    printMatrix(C, rowsA, colsB);

    freeMatrix(A, rowsA);
    freeMatrix(B, rowsB);
    freeMatrix(C, rowsA);

    return 0;
}
